# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OrganizadorDeLotes
                                 A QGIS plugin
 Organiza Lotes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.gui import QgsMapToolIdentifyFeature
from qgis.core import (QgsProcessing, QgsProcessingMultiStepFeedback,
                       QgsCoordinateReferenceSystem, QgsExpression,
                       QgsProject, QgsApplication, QgsMessageLog,
                       Qgis)
from .resources import *
from .Oganizado_Lotes_dialog import OrganizadorDeLotesDialog
import os.path
import processing

class OrganizadorDeLotes:
   
    #Inicializa o plugin
    def __init__(self, iface):
        """Constructor."""
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.tool = None
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'OrganizadorDeLotes_{}.qm'.format(locale))
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)
        self.actions = []
        self.menu = self.tr(u'&OrganizadorDeLotes')
        self.first_start = None

    #Traduz uma menssagem usando o sistema de tradução do QGIS
    def tr(self, message):
        return QCoreApplication.translate('OrganizadorDeLotes', message)
    

    #Adiciona uma ação (botão ou item do menu) ao plugin
    def add_action(self, icon_path, text, callback, enabled_flag=True, add_to_menu=True, add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        if status_tip is not None:
            action.setStatusTip(status_tip)
        if whats_this is not None:
            action.setWhatsThis(whats_this)
        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToVectorMenu(self.menu, action)
        self.actions.append(action)
        return action
    

    #Inicializa a interface do plugin
    def initGui(self):
        icon_path = ':/plugins/OrganizadorDeLotes/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ORGANIZA LOTE'),
            callback=self.run,
            parent=self.iface.mainWindow())
        self.first_start = True

    #Remove as ações (botões e menus) do plugin da interface do QGIS quando o plugin é descarregado.
    def unload(self):
        for action in self.actions:
            self.iface.removePluginVectorMenu(self.tr(u'&OrganizadorDeLotes'), action)
            self.iface.removeToolBarIcon(action)

    #Lista todas as conexões PostgreSQL configuradas no QGIS.
    def listar_conexoes_postgis(self):
        settings = QSettings()
        settings.beginGroup('PostgreSQL/connections')
        conexoes = settings.childGroups()
        settings.endGroup()
        return conexoes

    #Organiza a ordem dos lotes dentro de uma quadra.
    def organizar_ordem_lote(self, conexao, ins_quadra, ordem_primeira, feedback=None):
       
        
        results = {}
        outputs = {}
        try:
            #feedback.setProgressText("Localizando camada de lotes...")
            camada_lotes = None
            for layer in QgsProject.instance().mapLayers().values():
                if 'gis_boletim_lote' in layer.name().lower() or 'lote' in layer.name().lower():
                    camada_lotes = layer
                    break
            if not camada_lotes:
                raise Exception("Camada de lotes não encontrada no projeto!")
            #feedback.setProgressText("Extraindo lotes da quadra...")
            alg_params = {
                'FIELD': 'ins_quadra',
                'INPUT': camada_lotes,
                'OPERATOR': 0,
                'VALUE': str(ins_quadra),
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['ExtrairPorAtributo'] = processing.run(
                'native:extractbyattribute',
                alg_params,
                #feedback=feedback
            )
            camada_filtrada = outputs['ExtrairPorAtributo']['OUTPUT']
            print(camada_filtrada)
            #feedback.setCurrentStep(1)
            offset = sum(1 for f in camada_filtrada.getFeatures() if f['ordem'] >= ordem_primeira)
            expressao_ordem = f'''CASE
                WHEN "ordem" >= {ordem_primeira}
                THEN "ordem" - ({ordem_primeira} - 1)
                WHEN "ordem" < {ordem_primeira}
                THEN "ordem" + {offset}
                END'''
            feedback.setProgressText("Recalculando ordem...")
            alg_params = {
                'FIELDS_MAPPING': [
                    {'expression': '"matricula"', 'length': -1, 'name': 'matricula', 'precision': 0, 'type': 2},
                    {'expression': '"ins_quadra"', 'length': -1, 'name': 'ins_quadra', 'precision': 0, 'type': 2},
                    {'expression': expressao_ordem, 'length': -1, 'name': 'nv_ordem', 'precision': 0, 'type': 4}
                ],
                'INPUT': camada_filtrada,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['EditarCampos'] = processing.run(
                'native:refactorfields',
                alg_params,
                feedback=feedback
            )
            camada_processada = outputs['EditarCampos']['OUTPUT']
            feedback.setCurrentStep(2)
            feedback.setProgressText("Atualizando valores na camada local...")
            if not camada_lotes.isEditable():
                camada_lotes.startEditing()
            idx_nv_ordem = camada_lotes.fields().indexFromName("nv_ordem")
            if idx_nv_ordem == -1:
                raise Exception("Campo 'nv_ordem' não encontrado na camada!")
            index = {}
            for f in camada_lotes.getFeatures():
                index[(f['matricula'], f['ins_quadra'])] = f.id()
            atualizados = 0
            for f in camada_processada.getFeatures():
                chave = (f['matricula'], f['ins_quadra'])
                if chave in index:
                    fid = index[chave]
                    camada_lotes.changeAttributeValue(fid, idx_nv_ordem, f['nv_ordem'])
                    atualizados += 1
            results['success'] = True
            results['message'] = f"Campo nv_ordem atualizado localmente! {atualizados} registros alterados. (Não foi feito commit no banco de dados)"
        except Exception as e:
            results['success'] = False
            results['message'] = f"Erro durante o processamento: {str(e)}"
            QgsMessageLog.logMessage(
                f"Erro no plugin Organizador de Lotes: {str(e)}",
                'OrganizadorDeLotes',
                Qgis.Critical
            )
        return results

    #Executa a organização da ordem dos lotes.
    def executar_organizacao(self):
        try:
            conexao = self.dlg.cmbConexao.currentText()
            ins_quadra = self.dlg.spinInsQuadra.value()
            ordem_primeira = self.dlg.spinOrdemPrimeira.value()
            ins_quadra_confirma = self.dlg.spinInsQuadraConfirma.value()
            if not conexao:
                QMessageBox.warning(self.dlg, "Aviso", "Selecione uma conexão PostgreSQL!")
                return
            if ins_quadra != ins_quadra_confirma:
                QMessageBox.warning(self.dlg, "Aviso", "Os valores de INS_QUADRA não coincidem!")
                return
            if ordem_primeira < 1:
                QMessageBox.warning(self.dlg, "Aviso", "A ordem da primeira deve ser maior que 1!")
                return
            resposta = QMessageBox.question(
                self.dlg,
                "Confirmar Operação",
                f"Reorganizar lotes da quadra {ins_quadra} a partir da ordem {ordem_primeira}?",
                QMessageBox.Yes | QMessageBox.No
            )
            if resposta == QMessageBox.No:
                return
            feedback = QgsProcessingMultiStepFeedback(3, None)
            self.iface.messageBar().pushMessage(
                "OrganizadorDeLotes",
                "Processando reorganização...",
                level=Qgis.Info,
                duration=2
            )
            resultados = self.organizar_ordem_lote(
                conexao,
                ins_quadra,
                ordem_primeira,
                feedback
            )
            if resultados.get('success', False):
                QMessageBox.information(self.dlg, "Sucesso", resultados['message'])
                self.dlg.close()
            else:
                QMessageBox.critical(self.dlg, "Erro", resultados.get('message', 'Erro desconhecido'))
        except Exception as e:
            QMessageBox.critical(self.dlg, "Erro", f"Erro durante a execução: {str(e)}")
            QgsMessageLog.logMessage(
                f"Erro no plugin Organizador de Lotes: {str(e)}",
                'OrganizadorDeLotes',
                Qgis.Critical
            )

    #Ativa uma ferramenta de seleção de feições no mapa, especificamente para selecionar uma quadra.
    def ativarFerramentaSelecao(self):
        """Ativa a ferramenta de seleção de quadra"""
        if self.tool is not None:
            self.iface.mapCanvas().unsetMapTool(self.tool)

        quadra_layer = None
        for layer in QgsProject.instance().mapLayers().values():
            if layer.name() == "Quadra":  # Procurando pelo nome exato "Quadra"
                quadra_layer = layer
                print(f"Camada encontrada: {layer.name()}")  # Debug
                break

        if not quadra_layer:
            QMessageBox.warning(self.dlg, "Aviso", "Camada 'Quadra' não encontrada!")
            return

        self.iface.mainWindow().statusBar().showMessage("Clique em uma quadra para selecionar.")

        self.tool = QgsMapToolIdentifyFeature(self.iface.mapCanvas())
        self.tool.setLayer(quadra_layer)
        self.tool.featureIdentified.connect(self.capturarInsQuadra)

        self.iface.mapCanvas().setMapTool(self.tool)
        self.iface.mainWindow().setCursor(Qt.PointingHandCursor)

    #Quando uma quadra é clicada, esta função captura o valor do campo ins_quadra da feição clicada.
    def capturarInsQuadra(self, feature):
        """Captura o valor de ins_quadra da feição clicada e preenche os campos"""
        if feature.isValid():
            if 'ins_quadra' in feature.fields().names():
                ins_quadra = feature['ins_quadra']
                print(f"ins_quadra: {ins_quadra}")  # Debug

                QMessageBox.information(
                    self.dlg,
                    "Quadra Capturada",
                    f"Quadra capturada com sucesso!\n\n A ins_quadra encontrada é:{ins_quadra}"
                )

                self.dlg.spinInsQuadra.setValue(ins_quadra)
                self.dlg.spinInsQuadraConfirma.setValue(ins_quadra)
            else:
                QMessageBox.warning(
                    self.dlg,
                    "Erro",
                    "O campo 'ins_quadra' não existe na camada 'Quadra'."
                )
        else:
            QMessageBox.warning(
                self.dlg,
                "Erro",
                "Não foi possível identificar a quadra clicada."
            )

        self.iface.mapCanvas().unsetMapTool(self.tool)
        self.iface.mainWindow().unsetCursor()
        self.tool = None
    
    #Função principal que é chamada para iniciar o plugin.
    def run(self):
        """Run method that performs all the real work"""
        if self.first_start:
            self.first_start = False
            self.dlg = OrganizadorDeLotesDialog()
            if hasattr(self.dlg, 'btnSelecionarQuadra'):
                self.dlg.btnSelecionarQuadra.clicked.connect(self.ativarFerramentaSelecao)
            self.dlg.cmbConexao.clear()
            conexoes = self.listar_conexoes_postgis()
            if not conexoes:
                QMessageBox.warning(
                    self.iface.mainWindow(),
                    "Aviso",
                    "Nenhuma conexão PostgreSQL encontrada!\nConfigure uma conexão no QGIS primeiro."
                )
                return
            for nome in conexoes:
                self.dlg.cmbConexao.addItem(nome)
            if hasattr(self.dlg, 'btnExecutar'):
                self.dlg.btnExecutar.clicked.connect(self.executar_organizacao)
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            self.executar_organizacao()
